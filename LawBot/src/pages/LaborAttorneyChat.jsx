import { useEffect, useRef, useState } from 'react';
import { Client } from '@stomp/stompjs';
import send from '../assets/chatSend.png';
import { baseURL, wsBaseURL } from '../constants/baseURL';
import { apiClient } from '../services/apiClient';
import SockJS from 'sockjs-client';
import { useLocation, useParams } from 'react-router-dom';
import useUserData from '../constants/hooks/useUserData';

export const LaborAttorneyChat = () => {
  // ======================== üîß ÌååÎùºÎØ∏ÌÑ∞ & Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ ========================
  const params = useParams();
  const consaltantId = params.consaltantId;
  const { userId } = useUserData();
  const location = useLocation();
  const stateInfo = location.state;

  // ======================== üß† ÏÉÅÌÉú ========================
  const [conversationId, setConversationId] = useState();
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');

  const stomptRef = useRef(null);
  const messagesEndRef = useRef(null);

  // ‚úÖ 1. [ÏµúÏ¥à ÏßÑÏûÖ Ïãú] stateÏóêÏÑú conversationIdÍ∞Ä ÎÑòÏñ¥Ïò® Í≤ΩÏö∞ ‚Üí Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞©
  useEffect(() => {
    if (stateInfo && stateInfo.conversationId) {
      setConversationId(stateInfo.conversationId);
    }
  }, []);

  // ‚úÖ 2. [Ïú†Ï†Ä IDÏôÄ ÏÉÅÎã¥ÏÇ¨ IDÍ∞Ä ÏûàÍ≥† Í∏∞Ï°¥ conversationIdÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞] ‚Üí ÏÉà Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
  useEffect(() => {
    if (conversationId == null && userId && consaltantId) {
      makeNewConversation();
    }

    // Ïª¥Ìè¨ÎÑåÌä∏ unmount Ïãú disconnect
    return () => disconnect();
  }, [userId, consaltantId]);

  // ‚úÖ 3. conversationIdÍ∞Ä ÏÑ∏ÌåÖÎêòÎ©¥: Ïù¥Ï†Ñ Î©îÏãúÏßÄ Í∞ÄÏ†∏Ïò§Í≥†, ÏõπÏÜåÏºì Ïó∞Í≤∞
  useEffect(() => {
    if (conversationId) {
      getMessages(); // Í≥ºÍ±∞ Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞
      connect(); // ÏõπÏÜåÏºì Ïó∞Í≤∞
    }
  }, [conversationId]);

  // ======================== üìú Ïä§ÌÅ¨Î°§ ÏïÑÎûòÎ°ú ÏûêÎèô Ïù¥Îèô ========================
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // ======================== üì≤ Î©îÏÑ∏ÏßÄ Î∞úÏÜ° ========================
  const sendMessage = () => {
    if (input.trim() === '') return;

    const chatMessage = {
      conversationId: conversationId,
      senderId: userId,
      content: input,
      fromUser: true,
    };

    stomptRef.current?.publish({
      destination: '/app/chat',
      body: JSON.stringify(chatMessage),
    });

    console.log('Î©îÏãúÏßÄ Ï†ÑÏÜ°:', input);
    setInput('');
  };

  // ======================== üß† ÏÉàÎ°úÏö¥ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ========================
  const makeNewConversation = async () => {
    console.log('makeNewConversation');

    try {
      const res = await apiClient.post(
        `/api/conversations?userId=${userId}&title=Ï†úÎ™©&type=CONSULTANT&consultantId=${consaltantId}`,
      );
      setConversationId(res.data.id);
      console.log(res);
    } catch (error) {
      console.error('Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïã§Ìå®:', error);
    }
  };

  // ======================== üì• Í∏∞Ï°¥ Î©îÏÑ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ ========================
  const getMessages = async () => {
    try {
      const res = await apiClient.get(
        `${baseURL}/api/conversations/${conversationId}?accessorId=${userId}&isConsultant=false`,
      );
      const message = res.data.messages;
      setMessages(message);
    } catch (error) {
      console.error('Î©îÏÑ∏ÏßÄ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
    }
  };

  // ======================== üîå ÏõπÏÜåÏºì Ïó∞Í≤∞ ========================
  const connect = () => {
    const stompClient = new Client({
      webSocketFactory: () => new SockJS(wsBaseURL),
      reconnectDelay: 5000,

      onConnect: (frame) => {
        console.log('Connected:', frame);

        stompClient.subscribe('/topic/errors', (message) => {
          console.error('WebSocket ÏóêÎü¨:', message.body);
          alert('Ïò§Î•ò Î∞úÏÉù: ' + message.body);
        });

        stompClient.subscribe(
          `/topic/conversations/${conversationId}`,
          (messageOutput) => {
            const message = JSON.parse(messageOutput.body);
            addMessage(message);
            markMessageAsRead(message.id);
          },
        );
      },

      onStompError: (frame) => {
        console.error('STOMP ÏóêÎü¨:', frame.headers['message']);
        alert('Ïó∞Í≤∞ Ïã§Ìå®: ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
      },
    });

    stompClient.activate();
    stomptRef.current = stompClient;
  };

  // ======================== üîå ÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú ========================
  const disconnect = () => {
    if (stomptRef.current) {
      stomptRef.current.deactivate();
    }
  };

  // ======================== ‚úÖ Î©îÏÑ∏ÏßÄ ÏùΩÏùå Ï≤òÎ¶¨ ========================
  const markMessageAsRead = (messageId) => {
    if (stomptRef.current) {
      const readRequest = {
        messageId,
        conversationId,
        readerId: userId,
      };
      stomptRef.current.publish({
        destination: '/app/chat.read',
        body: JSON.stringify(readRequest),
      });
    }
  };

  // ======================== üìå Î©îÏÑ∏ÏßÄ Ï∂îÍ∞Ä ========================
  const addMessage = (message) => {
    setMessages((prevMessages) => {
      if (prevMessages.some((m) => m.id === message.id)) return prevMessages;
      return [...prevMessages, message];
    });
  };

  // ======================== üßº Ïú†Ìã∏ - Ïä§ÌÅ¨Î°§ ========================
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // ======================== üìÖ ÎÇ†Ïßú Ìè¨Îß∑ ========================
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // ======================== üñºÔ∏è UI ========================
  return (
    <div className="mt-10 flex flex-row justify-between">
      <div className="flex flex-col w-3xl relative m-auto">
        <div className="overflow-y-auto h-[calc(100vh-150px)] px-5 space-y-4">
          {messages.map((msg, idx) =>
            msg.fromUser ? (
              <div className="chat chat-end self-end w-full" key={idx}>
                <div className="chat-bubble bg-[#E2E2E2] text-black">
                  {msg.content}
                </div>
                {msg.read && <div className="chat-footer opacity-50">ÏùΩÏùå</div>}
              </div>
            ) : (
              <div className="chat chat-start" key={idx}>
                <div className="chat-image avatar">
                  <div className="w-10 rounded-full">
                    <img
                      alt="ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ"
                      src="https://img.daisyui.com/images/profile/demo/kenobee@192.webp"
                    />
                  </div>
                </div>
                <div className="chat-header">
                  ÎÖ∏Î¨¥ÏÇ¨Ïù¥Î¶Ñ
                  <time className="text-xs opacity-50">
                    {formatDate(msg.createdAt)}
                  </time>
                </div>
                <div className="chat-bubble bg-[#653F21] text-white">
                  {msg.content}
                </div>
              </div>
            ),
          )}
          <div ref={messagesEndRef} className="h-20" />
        </div>

        {/* ÏûÖÎ†•Ï∞Ω */}
        <div className="fixed bottom-0 left-0 right-0 pb-3 bg-white z-20 m-auto">
          <div className="flex items-center border-2 w-3xl border-[#653F21] rounded-lg bg-white h-[50px] px-3 mx-auto">
            <input
              type="text"
              placeholder="LawBotÏóêÍ≤å Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî"
              className="flex-grow outline-none bg-white"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  e.preventDefault();
                  sendMessage();
                }
              }}
            />
            <button type="button" onClick={sendMessage}>
              <img src={send} alt="send" className="w-5 h-5 ml-2" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
